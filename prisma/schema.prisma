// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// USER RELATED SCHEMAS START

enum UserRole {
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  image         String    @default("/images/default.png")
  name          String?
  username      String?
  email         String?   @unique
  publicEmail   String?
  phoneNumber   String?   @unique
  dateOfBirth   DateTime?
  allowFollow   Boolean   @default(false)
  emailVerified DateTime?
  password      String?

  favoriteIds   String[]  @default([])
  followers     String[]  @default([])
  followings    String[]  @default([])

  notifications Notification[]

  isOAuth       Boolean   @default(false)
  isTwoFactorEnabled Boolean @default(false)

  role          UserRole @default(USER)
  accounts      Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  listings Listing[]
}

enum NotificationType {
  FOLLOW
  LISTING
  REPORT
}

model Notification {
  id                String @id @default(cuid())
  userId            String
  type              NotificationType
  title             String
  name              String
  nameId            String
  reporter          String?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model AddTwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  createdAt DateTime @default(now())
  expires DateTime


  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// USER RELATED SCHEMAS END

enum Condition { 
  None
  New
  Excellent
  Good
  Used
  Broken
}

// enum Category { bla bla}

model Listing {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  title String
  description String
  price Float
  imageUrl String
  category String
  country String
  phone String
  
  condition Condition
  
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // comments Comment[]
}

// Comment